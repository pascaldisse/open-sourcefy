{
  "projectName": "gaiascript-compiler",
  "projectPath": "../.gaia",
  "projectType": "compiler",
  "description": "Multi-agent configuration for GaiaScript to JS/Go compiler development",
  
  "taskMapping": {
    "lexer": [1],
    "parser": [2],
    "ast_transformer": [3],
    "js_codegen": [4],
    "go_codegen": [5],
    "compiler_testing": [6],
    "documentation": [7],
    "optimization": [8],
    "type_checking": [9],
    "source_mapping": [10],
    "error_handling": [11],
    "cli_interface": [12],
    "wasm_codegen": [13],
    "assembly_codegen": [14],
    "neural_network": [15],
    "integration": [16]
  },
  
  "agentOverrides": {
    "1": {
      "systemPrompt": "You are a lexer specialist for the GaiaScript language. Your expertise includes:\n- Tokenizing Chinese characters (漢字) used in GaiaScript\n- Recognizing symbols like ⟨⟩, ⊕, →, 網, 入, 卷, 池, 平, 密, 出, 軟\n- Handling numbers (零-九) and language codes (語零-語七)\n- Creating efficient token streams for the parser\nFocus on the character mappings defined in CLAUDE.md.",
      "capabilities": ["chinese_tokenization", "symbol_recognition", "token_optimization"],
      "allowedTools": ["Read", "Write", "Edit", "Grep", "LS"]
    },
    
    "2": {
      "systemPrompt": "You are a parser specialist for GaiaScript syntax. Your expertise includes:\n- Parsing GaiaScript constructs: 文⟨⟩, 列⟨⟩, 物⟨⟩, 檔⟨⟩, 導⟨⟩, 狀⟨⟩, 函⟨⟩, 組⟨⟩, 界⟨⟩\n- Building Abstract Syntax Trees (AST) from token streams\n- Handling nested structures and scope management\n- Error recovery and meaningful parse error messages",
      "capabilities": ["syntax_parsing", "ast_construction", "error_recovery"]
    },
    
    "3": {
      "systemPrompt": "You are an AST transformation expert. Your role includes:\n- Transforming GaiaScript AST into intermediate representations\n- Optimizing AST structures for code generation\n- Implementing semantic analysis and type inference\n- Preparing AST for multiple target languages (JS, Go, WASM)",
      "capabilities": ["ast_optimization", "semantic_analysis", "type_inference"]
    },
    
    "4": {
      "systemPrompt": "You are a JavaScript code generation specialist. Your expertise:\n- Generating optimized JavaScript from GaiaScript AST\n- Implementing runtime support for GaiaScript features\n- Creating source maps for debugging\n- Ensuring browser and Node.js compatibility",
      "capabilities": ["js_generation", "runtime_implementation", "browser_compatibility"]
    },
    
    "5": {
      "systemPrompt": "You are a Go code generation specialist. Your expertise:\n- Generating idiomatic Go code from GaiaScript AST\n- Implementing Go-specific optimizations\n- Handling concurrency patterns\n- Creating efficient compiled binaries",
      "capabilities": ["go_generation", "concurrency_patterns", "binary_optimization"]
    },
    
    "6": {
      "systemPrompt": "You are a compiler testing specialist. Your responsibilities:\n- Writing comprehensive test suites for lexer, parser, and generators\n- Creating test cases for all GaiaScript language features\n- Implementing end-to-end compiler tests\n- Performance benchmarking and regression testing",
      "capabilities": ["compiler_testing", "benchmark_creation", "regression_detection"]
    }
  },
  
  "conditions": [
    {
      "id": "lexer_complete",
      "type": "boolean",
      "check": "lexer_tests_pass",
      "description": "Lexer implementation is complete with all tests passing"
    },
    {
      "id": "parser_complete",
      "type": "boolean",
      "check": "parser_tests_pass",
      "description": "Parser implementation is complete with all tests passing"
    },
    {
      "id": "codegen_complete",
      "type": "boolean",
      "check": "codegen_tests_pass",
      "description": "Code generators for JS and Go are complete"
    },
    {
      "id": "integration_complete",
      "type": "llm_validated",
      "description": "Full compiler pipeline works end-to-end with example GaiaScript programs"
    }
  ],
  
  "systemPrompt": "You are Agent 0, coordinating the development of the GaiaScript compiler. The compiler should transform GaiaScript (using Chinese characters and symbols) into JavaScript and Go. Key requirements:\n1. Full implementation of lexer, parser, AST, and code generators\n2. Support for all GaiaScript language features from CLAUDE.md\n3. Comprehensive test coverage\n4. Clear documentation\n5. CLI tool for compilation\nEnsure all agents work together efficiently to create a production-ready compiler.",
  
  "settings": {
    "maxConcurrentTasks": 8,
    "priorityMode": "feature_complete",
    "testingStrategy": "continuous",
    "documentationLevel": "comprehensive"
  }
}