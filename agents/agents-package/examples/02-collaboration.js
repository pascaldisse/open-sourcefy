import { MultiAgentSystem } from '../src/index.js';

/**
 * Example 2: Multi-Agent Collaboration
 * 
 * This example demonstrates:
 * - Multiple agents working together
 * - Task dependencies and sequencing
 * - Inter-agent communication
 * - Collaborative workflows
 */

async function runCollaborationExample() {
  console.log('=== Multi-Agent Collaboration Example ===\n');

  const system = new MultiAgentSystem();
  
  try {
    console.log('1. Initializing system...');
    await system.initialize();
    await system.start();
    console.log('✓ System ready\n');

    // Workflow: Code → Review → Document → Test
    
    console.log('2. Starting collaborative workflow...\n');

    // Step 1: Code Review (Agent 7)
    console.log('Step 1: Code Review');
    const codeToReview = `
      function processUserData(users) {
        const results = [];
        for (let i = 0; i < users.length; i++) {
          if (users[i].age > 18) {
            results.push({
              name: users[i].name,
              email: users[i].email
            });
          }
        }
        return results;
      }
    `;

    const reviewTask = {
      description: 'Review this code for quality, performance, and best practices',
      type: 'code_review',
      priority: 'high',
      context: {
        code: codeToReview,
        language: 'javascript',
        focus: ['performance', 'readability', 'best-practices']
      }
    };

    const reviewResult = await system.executeTask(reviewTask);
    console.log('✓ Code review completed by Agent', reviewResult.agentId);
    console.log('Review summary:', reviewResult.result.substring(0, 200) + '...\n');

    // Step 2: Documentation (Agent 2)
    console.log('Step 2: Generate Documentation');
    const docTask = {
      description: 'Create comprehensive documentation for the reviewed function',
      type: 'documentation',
      priority: 'medium',
      context: {
        code: codeToReview,
        reviewNotes: reviewResult.result,
        format: 'jsdoc'
      },
      requirements: 'Include parameter descriptions, return value, examples, and notes from code review'
    };

    const docResult = await system.executeTask(docTask);
    console.log('✓ Documentation created by Agent', docResult.agentId);
    console.log('Documentation preview:', docResult.result.substring(0, 200) + '...\n');

    // Step 3: Generate Tests (Agent 1)
    console.log('Step 3: Generate Test Suite');
    const testTask = {
      description: 'Create comprehensive test suite based on code and documentation',
      type: 'testing',
      priority: 'high',
      context: {
        code: codeToReview,
        documentation: docResult.result,
        reviewNotes: reviewResult.result,
        framework: 'jest'
      },
      requirements: 'Cover all edge cases mentioned in review, include performance tests'
    };

    const testResult = await system.executeTask(testTask);
    console.log('✓ Tests generated by Agent', testResult.agentId);
    console.log('Test suite preview:', testResult.result.substring(0, 200) + '...\n');

    // Step 4: Bug Detection (Agent 3)
    console.log('Step 4: Bug Analysis');
    const bugTask = {
      description: 'Analyze the code, tests, and review feedback for potential bugs',
      type: 'bug_fixing',
      priority: 'high',
      context: {
        code: codeToReview,
        tests: testResult.result,
        review: reviewResult.result
      }
    };

    const bugResult = await system.executeTask(bugTask);
    console.log('✓ Bug analysis completed by Agent', bugResult.agentId);
    console.log('Findings:', bugResult.result.substring(0, 200) + '...\n');

    // Display collaboration summary
    console.log('=== Collaboration Summary ===');
    console.log('Agents involved:', [
      reviewResult.agentId,
      docResult.agentId,
      testResult.agentId,
      bugResult.agentId
    ].join(', '));

    const totalDuration = 
      reviewResult.duration + 
      docResult.duration + 
      testResult.duration + 
      bugResult.duration;

    const totalCost = 
      (reviewResult.cost || 0) + 
      (docResult.cost || 0) + 
      (testResult.cost || 0) + 
      (bugResult.cost || 0);

    console.log('Total duration:', totalDuration, 'ms');
    console.log('Total cost:', `$${totalCost.toFixed(4)}`);
    console.log('Tasks completed:', 4);

    // Check message bus activity
    const messageStats = system.messageBus.getStatistics();
    console.log('\nCommunication Statistics:');
    console.log('- Total messages:', messageStats.totalMessages);
    console.log('- Average response time:', messageStats.averageResponseTime.toFixed(2), 'ms');

  } catch (error) {
    console.error('Error during collaboration:', error);
  } finally {
    await system.shutdown();
    console.log('\n✓ System shut down');
  }
}

// Run the example
runCollaborationExample().catch(console.error);